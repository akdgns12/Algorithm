package BruteForce;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Nqueen {
	
	public static int[] arr;
	public static int N;
	public static int count = 0;
	
	public static void main(String[] args) throws IOException {
	
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		N = Integer.parseInt(br.readLine());
		arr = new int[N];
		
		nQueen(0);
		System.out.println(count);
	}
	
	// 재귀호출 부분
	public static void nQueen(int depth) {
		//모든 원소를 다 채운 상태면 count 증가 및 return
		if(depth==N) {
			count++;
			return;
		}
		
		for(int i=0; i<N; i++) {
			arr[depth] = i;
			//놓을 수 있는 위치일 경우 재귀호출
			if(Possibility(depth)) {
				nQueen(depth+1);
			}
		}
	}
	// 놓을 위치가 다른 퀸으로부터 위협받는지를 검사하는 조건문
	public static boolean Possibility(int col) {
		for(int i=0; i<col; i++) {
			// 해당 열의 행과 i열의 행이 일치할 경우(같은 행에 존재할 경우)
			if(arr[col]==arr[i]) {
				return false;
			}
			
			/*
			 * 대각선상에 놓여있는 경우
			 * (열의 차와 행의 차가 같을 경우가 대각선에 놓여있는 경우다)
			 */
			// Math.abs 해당 인자값에 대한 절대값을 반환하는 함수
			else if(Math.abs(col-i)==Math.abs(arr[col]-arr[i])) {
				return false;
			}
		}
	return true;
	}
}
